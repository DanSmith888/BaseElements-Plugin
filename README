=======================================================================
Building
=======================================================================

The following notes describe the process for building the the plugin and the third-party libraries used. The instructions are supplied "as is" in the hope they may be of assistance.

Notes:
- these instructions apply to version 2.0 of the BaseElements Plugin
- the instructions contain some full paths and also paths containing version numbers that will likely need to be changed

=======================================================================
Mac OS X
=======================================================================

Version 2.0 of the plug-in was built using Xcode 4.3.3 on Mac OS X 10.7.4.

Download the Mac version of the FileMaker External Plug-In API from

	http://www.filemaker.com/support/technologies/

and place the FMWrapper.framework in the Libraries directory.

On the Mac most of the required headers and library files are installed by default on the system. The only third-party libraries that need to be built are OpenSSL and the Boost FileSystem, System and Thread libraries.

=======================================================================
Boost
=======================================================================

Boost is available from

	http://www.boost.org/

Note: v2.0 of the plug-in requires Boost 1.49_0 (or later).

The plug-in is a universal binary and the boost libraries should be built accordingly. For example:

	cd boost_1_49_0
	./bootstrap.sh
	./b2 architecture=x86 link=static runtime-link=static --with-thread --with-filesystem

See

	more/getting_started/index.html

for for further information on compiling the Boost libraries.

The boost headers must be placed in the Headers directory and the

	bin.v2/libs/filesystem/build/darwin-4.2.1/release/architecture-combined/link-static/runtime-link-static/threading-multi/libboost_filesystem.a
	bin.v2/libs/thread/build/darwin-4.2.1/release/architecture-combined/link-static/threading-multi/libboost_thread.a
	bin.v2/libs/system/build/darwin-4.2.1/release/architecture-combined/link-static/threading-multi/libboost_system.a

libraries placed in the Libraries directory.

=======================================================================
minizip
=======================================================================

Download the zlib source from

	http://www.zlib.net/

and extract the folder zlib-1.2.7 to the desktop. Copy the minizip directory from the contrib directory in the zlib distribution to the Source directory.


=======================================================================
OpenSSL
=======================================================================

To follow... for the moment copy OpenSSL.framework from inside the FileMaker 11 application package into the Libraries folder.

Download the latest openssl source from

	http://www.openssl.org/source/

(openssl-1.0.1c.tar.gz at the time of writing).

Unpack the archive onto the desktop and, using the command prompt

	cd /Users/mark/Desktop/openssl-1.0.1c
	./Configure darwin-i386-cc --openssldir=/Users/mark/Desktop/openssl-i386
	make install

Copy openssl-i386/libcrypto.a and openssl-i386/libssl.a to Libraries and copy openssl-i386/includes/openssl to Headers.


=======================================================================
Windows
=======================================================================

The plug-in was built using Visual Studio 2010 Professional on Windows 7 Ultimate.

Download the Windows version of the FileMaker External Plug-In API from

	http://www.filemaker.com/support/technologies/

rename the Headers directory FMWrapper and place it in the Headers directory. FMWrapper.lib should be placed the Libraries directory.

The BaseElements plug-in is built as a static library and all third-party libraries must be built from source as static libraries (/MTd & /MT) using libcmt.lib and nafxcw.lib for release and libcrtd.lib and nafxcwd.lib for debug builds.

Note: source code for some of the libraries is supplied as gzipped tar archives; there are a number of applications that can unpack these archives, for example, Stuffit Expander

	http://www.stuffit.com/win-expander.html

Another note: when doing both debug and release builds clean the project when switching from one t'other.


=======================================================================
Boost
=======================================================================

The Boost FileSystem and System libraries are required.

	http://www.boost.org/

Note: v2.0 of the plug-in requires Boost 1.49 (or later).

See

	more/getting_started/index.html

for instructions on compiling the Boost libraries. In general

	cd boost_1_49_0
	bootstrap.bat
	b2 link=static runtime-link=static --with-thread --with-filesystem --with-date_time

should do the trick.

The boost headers must be placed in the Headers directory and the libraries copied from

	bin.v2\libs\date_time\build\msvc-10.0\release\link-static\runtime-link-static\threading-multi\libboost_date_time-vc100-mt-s-1_49.lib
	bin.v2\libs\filesystem\build\msvc-10.0\release\link-static\runtime-link-static\threading-multi\libboost_filesystem-vc100-mt-s-1_49.lib
	bin.v2\libs\thread\build\msvc-10.0\release\link-static\runtime-link-static\threading-multi\libboost_thread-vc100-mt-s-1_49.lib
	bin.v2\libs\system\build\msvc-10.0\release\link-static\runtime-link-static\threading-multi\libboost_system-vc100-mt-s-1_49.lib

into the Libraries directory. For debug builds also copy

	bin.v2\libs\date_time\build\msvc-10.0\debug\link-static\runtime-link-static\threading-multi\libboost_date_time-vc100-mt-sgd-1_49.lib
	bin.v2\libs\filesystem\build\msvc-10.0\debug\link-static\runtime-link-static\threading-multi\libboost_filesystem-vc100-mt-sgd-1_49.lib
	bin.v2\libs\thread\build\msvc-10.0\debug\link-static\runtime-link-static\threading-multi\libboost_thread-vc100-mt-sgd-1_49.lib
	bin.v2\libs\system\build\msvc-10.0\debug\link-static\runtime-link-static\threading-multi\libboost_system-vc100-mt-sgd-1_49.lib


=======================================================================
zlib
=======================================================================

Building zlib is straightforward. Download the zlib source from

	http://www.zlib.net/

and extract the folder zlib-1.2.7 to the desktop.

Open the solution file "contrib/vstudio/vc10/zlibvc.sln" and from the "Build Menu" select "Configuration Manager" and, once in the Configuration Manager, select "ReleaseWithoutAsm" as the "Active solution configuration".

Remove ZLIB_WINAPI from the list of preprocessor definitions.

Build the library and move

	contrib/vstudio/vc10/x86/ZlibStatReleaseWithoutAsm/zlibstat.lib

in the Libraries directory and zlib.h in the Headers directory.


=======================================================================
minizip
=======================================================================

Copy the minizip directory from the contrib directory in the zlib distribution to the Source directory.


=======================================================================
libiconv & libxml2
=======================================================================

Download the libiconv source from

	http://www.gnu.org/software/libiconv/

Download a patch to provide Visual Studio support from

	https://sites.google.com/site/kontr0kontradiktion/software/patches

and download the Windows port of the patch from

	http://gnuwin32.sourceforge.net/packages/patch.htm

Then, in a terminal prompt

	cd libiconv-1.14
	patch.exe -p1 -i ..\libiconv-1.14.vc10.patch --binary


Download the source for libxml2 from

	http://xmlsoft.org/downloads.html

and expand it into a directory on the Desktop.

Note: the full path of the directory should not contain any spaces.

Rename the folder libiconv-1.14 to libiconv-1.14.vc10

The Visual Studio solution file is in

	libxml2-2.8.0\win32\VC10

From the "Build" menu select "Confuration Manager" and then set "Active solution configuration" to Release and in the "Build" column, uncheck "runsuite".

In the Property Pages

	libxml2 -> Configuration Properties -> VC++ Directories -> Include Directories

add paths to the following directories

	libxml2-2.8.0win32\VC10
	libxml2-2.8.0win32\include
	libiconv-1.14.vc10\include

and in

	libxml2 -> Configuration Properties -> General -> Project Defaults

set

	Configuration Type = Static Library (.lib)
	Character Set = Use Unicode Character Set

In the Property Pages of both libxml2 & iconv set

	... -> Configuration Properties -> C/C++ -> Code Generation -> Runtime Library = Multi-threaded (/MT)

and then build the project.

Copy Release\iconv.lib & Release\libxml2.lib to the BE Plugin Libraries folder and, finally, copy

	libxml2-2.8.0\include\libxml

into the BE Plugin Headers folder and create a folder, iconv, in the BE Plugin Headers folder and copy

	libiconv-1.14.vc10\include\iconv.h

into that.


=======================================================================
libxml2
=======================================================================


	cscript configure.js static=yes debug=no cruntime=-MT include="\\VBOXSVR\BaseElements-Plugin\Headers\iconv" lib="\\VBOXSVR\BaseElements-Plugin\Libraries"
	nmake -f Makefile.msvc MFLAGS=-MT libxmla

to configure and build the source.


=======================================================================
libxslt & libexslt
=======================================================================

Download the source from

	http://xmlsoft.org/XSLT/downloads.html

and expand it into a directory on the Desktop.

Note: the full path of the directory should not contain any spaces.

Open a terminal window and set up the Visual Studio command line environment

	c:\Program Files\Microsoft Visual Studio 10.0\VC\bin\vcvars32.bat

then move to the win32 directory in the archive

	cd Desktop\libxslt-1.1.26\win32

Edit the file

	Makefile.msvc

by commenting out the line

	DFLAGS = $(LDFLAGS) /OPT:NOWIN98

and also change

	libxml2.lib

to

	libxml2_a.lib

throughout.

Run the commands (changing the include= & lib= paths as appropriate)

	cscript configure.js static=yes debug=no cruntime=-MT include="\\VBOXSVR\BaseElements-Plugin\Headers;\\VBOXSVR\BaseElements-Plugin\Headers\iconv" lib="\\VBOXSVR\BaseElements-Plugin\Libraries"
	nmake -f Makefile.msvc MFLAGS=-MT libxslta libexslta

to configure and build the source.

Finally, place the headers from the directories

	libxslt-1.1.26\include\libxslt & libxslt-1.1.26\include\libexslt

into directories, libxslt & libexslt, in the Headers directory and copy the libraries

	bin.msvc\libxslt_a.lib & bin.msvc\libexslt_a.lib

into the Libraries directory.


=======================================================================
OpenSSL
=======================================================================

Building OpenSSL requires that perl is installed. The ActiveState perl (Community Edition) is a good
place to start if you do not already have perl installed

	http://www.activestate.com/activeperl


Download the latest openssl source from

	http://www.openssl.org/source/

(openssl-1.0.1c.tar.gz at the time of writing).

Unpack the archive onto the desktop and, using the command prompt

	cd c:\Users\Mark\Desktop\openssl-1.0.1c
	perl Configure VC-WIN32 enable-static-engine no-asm
	ms\do_nt
	c:\Program Files\Microsoft Visual Studio 10.0\VC\bin\vcvars32.bat
	nmake -f ms\nt.mak

Copy out32\libeay32.lib and out32\ssleay32.lib to Libraries and copy inc32\openssl to Headers.

=======================================================================
libcurl
=======================================================================

Note: OpenSSL must be built before building libcurl.

Download the source from

	http://curl.haxx.se/download.html

and expand it into a directory on the Desktop.

Open
	vc6curl.dsw

and set the following Configuration Properties:

	General -> Use of MFC == Use MFC in a Static Library
	Project Defaults -> Character Set == Use Unicode Character Set
	C/C++ -> Preprocessor -> Preprocessor Definitions ... add USE_SSLEAY
	C/C++ -> Preprocessor -> Preprocessor Definitions ... add USE_OPENSSL
	C/C++ -> Code Generation -> Runtime Library == Multi-threaded (/MT)
	VC++ Directories -> Include Directories -> add the path to the BEPlugin Headers directory


In Visual Studio and select "Batch Build" and check the "LIB Release" configuration and then "Build".

Copy the library from

	curl-7.26.0\lib\LIB-Release\libcurl.lib

into the Libraries directory and copy

	curl-7.26.0\include\curl

to the Headers directory.


=======================================================================
